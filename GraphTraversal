// Graph Depth First Search...
void dfs(vector<ll> graph[] , ll source){
    vis[source] = true;
    for(auto child : graph[source]){
        if(vis[child]) continue;
        dfs(graph , child);
    }
}

// Tree Depth First Search...
void dfs(vector<ll> graph[] , ll source , ll parent){
    for(auto child : graph[source]){
        if(child == parent) continue;
        dfs(graph , child , source);
    }
}

// Breadth First Search....
vector<ll> bfs(vector<ll> graph[] , ll n , ll source){
    vector<bool> vis(n + 1 , 0);
    vector<ll> lev(n + 1 , 0);
    queue<ll> q;
    q.push(source);
    vis[source] = true;
    while(!q.empty()){
        auto it = q.front();
        q.pop();
        for(auto child : graph[it]){
            if(vis[child]) continue;
            lev[child] = lev[it] + 1;
            q.push(child);
            vis[child] = true;
        }
    }
    return lev;
}
