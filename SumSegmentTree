class SegmentTree{
public : 
    vector<ll> seg;
    ll sz;
    SegmentTree(ll n){
        sz = n;
        seg.resize(4 * n + 5 , 0);
    }
    
    ll merge(ll a , ll b){
        return a + b;
    }
    void build(ll ind , ll low , ll high , vector<ll> &arr){
        if(low == high){
            seg[ind] = arr[low];
            return ;
        }
        ll mid = (low + high) / 2;
        build(2 * ind + 1 , low , mid , arr);
        build(2 * ind + 2 , mid + 1 , high , arr);
        seg[ind] = merge(seg[2 * ind + 1] , seg[2 * ind + 2]);
    }
    
    void getUpdated(ll ind , ll low , ll high , ll index , ll val){
        if(low == high){
            seg[ind] = val;
            return ;
        }
        ll mid = low + (high - low) / 2;
        if(index <= mid) getUpdated(2 * ind + 1 , low , mid , index , val);
        else getUpdated(2 * ind + 2 , mid + 1 , high , index , val);
        
        seg[ind] = merge(seg[2 * ind + 1] , seg[2 * ind + 2]);
    }
    
    ll getVal(ll ind , ll low , ll high , ll l , ll r){
        if(high < l || r < low) return 0;
        if(low >= l && high <= r) return seg[ind];
        
        ll mid = (high + low) / 2;
        ll left = getVal(2 * ind + 1 , low , mid , l , r);
        ll right = getVal(2 * ind + 2 , mid + 1 , high , l , r);
        return merge(left , right);
    }
    
    ll query(ll l , ll r){
        return getVal(0 , 0 , sz - 1 , l , r);
    }
    
    void make(vector<ll> &arr){
        ll n = arr.size();
        build(0 , 0 , n - 1 , arr);
    }
    void update(ll ind , ll val){
        ll n = seg.size();
        getUpdated(0 , 0 , sz - 1 , ind , val);
    }
    
};
